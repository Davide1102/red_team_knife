import json
import requests
from controllers.search_exploit import (
    CVE,
    EDB,
)
from views.headless_view import HeadlessBlueprint


class SearchExploitBlueprint(HeadlessBlueprint):
    def __format_html__(self, result):
        if result["type"] in (CVE, EDB):
            return self.__format_exploitdb_html__(result)
        return self.__format_less_detailed_html__(result)

    def __format_exploitdb_html__(self, result):
        query = result["query"]
        query_type = result["type"]
        result = result["result"]

        html_string = ""

        if query_type == EDB:

            for result in result["RESULTS_EXPLOIT"]:

                # check if there is a query result
                if result.get("URL", False):

                    # check if it is correct result
                    if (
                        result["URL"]
                        == f"https://www.exploit-db.com/exploits/{query.split(':')[1]}"
                    ):

                        html_string += "<p><b>Title: </b>"
                        html_string += f'{result["Title"]}</p><br>'

                        html_string += "<p><b>Url: </b>"
                        html_string += f'<a href= "{result["URL"]}" target="_blank">{result["URL"]}</a></p><br>'

        elif query_type == CVE:

            for result in result["RESULTS_EXPLOIT"]:

                if result.get("URL", False):

                    html_string += "<p><b>Title: </b>"
                    html_string += f'{result["Title"]}</p><br>'

                    html_string += "<p><b>Url: </b>"
                    html_string += (
                        f'<a href= "{result["URL"]}">{result["URL"]}</a></p><br>'
                    )

        # get the cvss score detail
        cvss_vector = self.__get_cvss_vector__(query)

        if cvss_vector:

            # add cvss vector to the modal
            for key in cvss_vector.keys():
                html_string += f"<p><b>{key} vector: </b>"
                html_string += f"{cvss_vector[key]}"

        return html_string

    def __format_less_detailed_html__(self, result):
        query = result["query"]
        query_type = result["type"]
        result = result["result"]

        html_string = ""

        for r in result:
            for key in r.keys():

                html_string += f"<p><b>{key} Reference: </b>"
                html_string += f'<a href= "{r[key]}"> {r[key]}</a></p><br>'

        # get the cvss score detail
        cvss_vector = self.__get_cvss_vector__(query)

        if cvss_vector:

            # add cvss vector to the modal
            for key in cvss_vector.keys():
                html_string += f"<p><b>{key} vector: </b>"
                html_string += f"{cvss_vector[key]}"

        return html_string

    def __get_cvss_vector__(self, query):

        response = requests.get(
            "https://vulners.com/api/v3/search/id/?id=" + query
        )

        # check if there is data
        if response.status_code == 200:
            response_dict: dict = json.loads(response.text)

            # check for data
            if response_dict.get("data"):

                # check for documents dict
                if response_dict["data"].get("documents"):

                    # check for id result
                    if response_dict["data"]["documents"].get(query):

                        # check for different type of cvss
                        if response_dict["data"]["documents"][query].get("cvss4"):

                            cvss_vector = {
                                "cvss4": response_dict["data"]["documents"][query][
                                    "cvss4"
                                ]["cvssV4"]["vectorString"]
                            }

                        elif response_dict["data"]["documents"][query].get(
                            "cvss3"
                        ):

                            cvss_vector = {
                                "cvss3": response_dict["data"]["documents"][query][
                                    "cvss3"
                                ]["cvssV3"]["vectorString"]
                            }

                        elif response_dict["data"]["documents"][query].get(
                            "cvss2"
                        ):

                            cvss_vector = {
                                "cvss2": response_dict["data"]["documents"][query][
                                    "cvss2"
                                ]["cvssV2"]["vectorString"]
                            }

                        else:

                            cvss_vector = {
                                "cvss": response_dict["data"]["documents"][query][
                                    "cvss"
                                ]["vector"]
                            }

                        return cvss_vector

        return None
