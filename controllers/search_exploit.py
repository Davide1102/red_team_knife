from loguru import logger as l
import subprocess, json, requests

from controllers.base_controller import Controller
from controllers.command_thread import CommandThread

RUNNING_MESSAGE = "Running Searchsploit DB with command: "
TOOL_DISPLAY_NAME = "Search Exploit"
TOOL_NAME = "search_exploit"
EDB = "EDB-ID"
CVE = "CVE"
SSV = "SSV"
SEEBUG = "seebug"
VULDB = "vuldb"
SSVID = "ssvid"
PACKETSTORM = "PACKETSTORM"
EXPLOITPACK = "EXPLOITPACK"
DAYID = "DAY-ID"
ZDT = "ZDT"
GITHUBEXPLOIT = "githubexploit"
VULNERLAB = "VULNERLAB"
VULNERABLE = "VULNERABLE"
CANVAS = "canvas"
SAINT = "SAINT"
MSF = "MSF"
EXPLOITDB = "EXPLOITDB"


class SearchExploitController(Controller):
    def __init__(self):
        """
        Overridden init method for customisation.
        """
        super().__init__(TOOL_DISPLAY_NAME, None, TOOL_NAME)
        self.query = None
        self.query_type = None
        self.command_output = None

    def run(self, query, type):
        """
        Overridden run method for customization.
        """
        l.info(f"{self.tool_display_name} query: {query}.")
        self.last_scan_result = None
        self.command_output = None
        type = type["options"]

        if SSV in query:
            self.is_scan_in_progress = True
            self.query = query
            self.query_type = SSV
            self.is_scan_in_progress = False

        elif VULNERLAB in query or VULNERABLE in query:
            self.is_scan_in_progress = True
            self.query = query
            self.query_type = VULNERLAB
            self.is_scan_in_progress = False

        elif PACKETSTORM in query:
            self.is_scan_in_progress = True
            self.query = query
            self.query_type = PACKETSTORM
            self.is_scan_in_progress = False

        elif MSF in query:
            self.is_scan_in_progress = True
            self.query = query
            self.query_type = MSF
            self.is_scan_in_progress = False

        elif SAINT in query:
            self.is_scan_in_progress = True
            self.query = query
            self.query_type = SAINT
            self.is_scan_in_progress = False

        elif EXPLOITPACK in query:
            self.is_scan_in_progress = True
            self.query = query
            self.query_type = EXPLOITPACK
            self.is_scan_in_progress = False

        elif DAYID in query:
            self.is_scan_in_progress = True
            self.query = query
            self.query_type = DAYID
            self.is_scan_in_progress = False

        elif EDB in query or CVE in query or CVE.lower() in type or EXPLOITDB.lower() in type:
            
            if EDB in query or EXPLOITDB.lower() in type:

                # take db code
                self.query = query
                query = query.split(":")[1]
                self.query_type = EDB
                command = ["searchsploit", "-w", "-j", query]

            elif CVE in query or CVE.lower() in type:

                self.query_type = CVE
                self.query = query
                command = ["searchsploit", "-w", "-j", self.query]
            

            self.__log_running_message__(command)

            class SearchExploitCommandThread(CommandThread):
                # Run method needs to be overriden in this case.
                # Default generates problems.
                def run(self):
                    # Set the flag indicating the scan is in progress
                    self.calling_controller.is_scan_in_progress = True

                    # Start the subprocess and capture its output
                    command_output = ""
                    self.process = subprocess.Popen(
                        self.command,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.STDOUT,
                        text=True,
                    )

                    self.process.wait()

                    # Accumulate the output while the command is running
                    for output in self.process.stdout:
                        command_output += output

                    # Print the accumulated output once the command completes
                    command_output = command_output.strip()
                    print(command_output)
                    self.calling_controller.command_output = command_output

                    # Terminate the process if it's still running
                    if self.process.poll() is None:
                        self.process.kill()

                    # Print completion message if the process wasn't stopped
                    if not self._stop_event.is_set():
                        self.print_stop_completed_message()

                    # Wait for the process to terminate
                    # self.process.wait()
                    self.calling_controller.is_scan_in_progress = False

            self.thread = SearchExploitCommandThread(command, self)
            self.thread.start()

        elif CANVAS in type:
            self.is_scan_in_progress = True
            self.query = query
            self.query_type = CANVAS
            self.is_scan_in_progress = False
        elif GITHUBEXPLOIT in type:
            self.is_scan_in_progress = True
            self.query = query
            self.query_type = GITHUBEXPLOIT
            self.is_scan_in_progress = False

    def get_results(self) -> object:
        """
        Builds a dictionary with the references based on the vulnerability type.

        Returns:
            dict: The dictionary with the references
        """
        l.info(f"Retrieving {self.tool_display_name} results...")
        if self.query_type == SSV:
            self.last_scan_result = [
                {"Vulners": "https://vulners.com/" + SEEBUG + "/" + self.query},
                {
                    "Seebug": "https://www.seebug.org/"
                    + VULDB
                    + "/"
                    + self.query.replace(SSV, SSVID).replace(":", "-")
                },
            ]

        elif self.query_type == SAINT:
            self.last_scan_result = [
                {"Vulners": "https://vulners.com/" + CANVAS + "/" + self.query},
            ]

            source_ref = self.__get_hidden_link_vuln__()
            if source_ref:
                self.last_scan_result.append({"Saint": source_ref})

        elif self.query_type == MSF:
            self.last_scan_result = [
                {"Vulners": "https://vulners.com/" + MSF + "/" + self.query},
            ]

            source_ref = self.__get_hidden_link_vuln__()
            if source_ref:
                self.last_scan_result.append({"Metasploit": source_ref})

        elif self.query_type == CANVAS:
            self.last_scan_result = [
                {"Vulners": "https://vulners.com/" + SAINT + "/" + self.query},
                {
                    "Immunity": "http://exploitlist.immunityinc.com/home/exploitpack/CANVAS/"
                    + self.query
                },
            ]

        elif self.query_type == PACKETSTORM:
            self.last_scan_result = [
                {"Vulners": "https://vulners.com/" + PACKETSTORM + "/" + self.query},
                {
                    "Packet Storm": "https://packetstormsecurity.com/files/"
                    + self.query.split(":")[1]
                },
            ]

        elif self.query_type == EXPLOITPACK:
            self.last_scan_result = [
                {"Vulners": "https://vulners.com/" + EXPLOITPACK + "/" + self.query},
            ]

        elif self.query_type == DAYID:
            self.last_scan_result = [
                {"Vulners": "https://vulners.com/" + ZDT + "/" + self.query}
            ]

            source_ref = self.__get_hidden_link_vuln__()
            if source_ref:
                self.last_scan_result.append({"Zero Day": source_ref})

        elif self.query_type == GITHUBEXPLOIT:
            self.last_scan_result = [
                {"Vulners": "https://vulners.com/" + GITHUBEXPLOIT + "/" + self.query},
            ]

        elif self.query_type == VULNERLAB:
            self.last_scan_result = [
                {"Vulners": "https://vulners.com/" + VULNERLAB + "/" + self.query},
                {
                    "Vulnerability Lab": "https://www.vulnerability-lab.com/get_content.php?id="
                    + self.query.split(":")[1]
                },
            ]

        else:
            if not self.last_scan_result:
                json_results = json.loads(self.command_output)
                self.last_scan_result = json_results

        self.last_scan_result = {
            "type": self.query_type,
            "query": self.query,
            "result": self.last_scan_result,
        }
        l.success("Results retrieved successfully.")
        return self.last_scan_result

    def __get_hidden_link_vuln__(self):
        """
        Execute a GET Request to Vulners API endpoint to fetch data to build the href tag.

        Returns:
            string: The URL to Vulners Exploit page.
        """

        response = requests.get(
            "https://vulners.com/api/v3/search/id/?id=" + self.query
        )

        if response.status_code == 200:
            json_response = json.loads(response.text)

            if json_response["data"]["documents"][self.query].get("href", False):
                href = json_response["data"]["documents"][self.query]["href"]
                return href

        return None