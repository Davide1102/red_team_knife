import threading
import subprocess, os, json, shutil, time, requests

from utils.commands import build_command_string
from controllers.controller_thread import Controller, CommandThread


RUNNING_MESSAGE = "Running Searchsploit DB with command: "
TOOL_NAME = "searchsploit-DB"
EDB = "EDB-ID"
CVE = "CVE"
SSV = "SSV"
SEEBUG = "seebug"
VULDB = "vuldb"
SSVID = "ssvid"
PACKETSTORM = "PACKETSTORM"
EXPLOITPACK = "EXPLOITPACK"
DAYID = "DAY-ID"
ZDT = "ZDT"
GITHUBEXPLOIT = "GITHUBEXPLOIT"



class SearchsploitController(Controller):
    def __init__(self):
        self.last_scan_result = None
        self.is_scan_in_progress = False
        self.tool_name = TOOL_NAME
        self.query = None
        self.type_query = None
        self.command_output = None

    def run(self, query, options):
        print("QUERY", query)
        self.last_scan_result = None

        if SSV in query:
            self.is_scan_in_progress = True
            self.query = query
            self.type_query = SSV
            self.is_scan_in_progress = False

        elif PACKETSTORM in query:
            self.is_scan_in_progress = True
            self.query = query
            self.type_query = PACKETSTORM
            self.is_scan_in_progress = False

        elif EXPLOITPACK in query:
            self.is_scan_in_progress = True
            self.query = query
            self.type_query = EXPLOITPACK
            self.is_scan_in_progress = False

        elif DAYID in query:
            self.is_scan_in_progress = True
            self.query = query
            self.type_query = DAYID
            self.is_scan_in_progress = False

        elif EDB in query or CVE in query:

            if EDB in query:

                # take db code
                self.query = query
                query = query.split(":")[1]
                self.type_query = EDB
                command = ["searchsploit", "-w", "-j", query]


            elif CVE in query:

                self.type_query = CVE
                self.query = query
                command = ["searchsploit", "-w", "-j", self.query]



            print(command)

            command_string = build_command_string(command)
            print(RUNNING_MESSAGE + command_string[:-1])

            class SearchsploitCommandThread(CommandThread):
                def run(self):
                    # Set the flag indicating the scan is in progress
                    self.caller.is_scan_in_progress = True

                    # Start the subprocess and capture its output
                    command_output = ""
                    self.process = subprocess.Popen(
                        self.command,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.STDOUT,
                        text=True,
                    )

                    self.process.wait()

                    # Accumulate the output while the command is running
                    for output in self.process.stdout:
                        command_output += output

                    # Print the accumulated output once the command completes
                    command_output = command_output.strip()
                    print(command_output)
                    self.caller.command_output = command_output

                    # Terminate the process if it's still running
                    if self.process.poll() is None:
                        self.process.kill()

                    # Print completion message if the process wasn't stopped
                    if not self._stop_event.is_set():
                        print(self.tool_name + " scan completed.")

                    # Wait for the process to terminate
                    # self.process.wait()
                    self.caller.is_scan_in_progress = False

            self.thread = SearchsploitCommandThread(command, self)
            self.thread.start()

        else:
            self.is_scan_in_progress = True
            self.query = query
            self.type_query = GITHUBEXPLOIT
            self.is_scan_in_progress = False


    def __format_result__(self):

        if self.type_query == SSV:
            self.last_scan_result = [
                {"Vulners": "https://vulners.com/" + SEEBUG + "/" + self.query},
                {"Seebug": "https://www.seebug.org/" + VULDB + "/" + self.query.replace(SSV, SSVID).replace(':', '-')}
            ]

        
        elif self.type_query == PACKETSTORM:
            self.last_scan_result = [
                {"Vulners": "https://vulners.com/" + PACKETSTORM + "/" + self.query},
                {"Packet Storm": "https://packetstormsecurity.com/files/" + self.query.split(':')[1]}
            ]


        elif self.type_query == EXPLOITPACK:
            self.last_scan_result = [
                {"Vulners": "https://vulners.com/" + EXPLOITPACK + "/" + self.query},
            ] 
        
        elif self.type_query == DAYID:
            self.last_scan_result = [
                {"Vulners": "https://vulners.com/" + ZDT + "/" + self.query}
            ]
 
        
        elif self.type_query == GITHUBEXPLOIT:
            self.last_scan_result = [
                {"Vulners": "https://vulners.com/" + GITHUBEXPLOIT + "/" + self.query},
            ]

        else:
            if not self.last_scan_result:

                print(self.command_output)

                json_results = json.loads(self.command_output)
                self.last_scan_result = json_results

            with open("test.json", "w") as file:
                print(json.dumps(self.last_scan_result), file=file)

            return self.__format_exploitdb_html__()
        
        return self.__format_less_detailed_html__()


    def __format_exploitdb_html__(self):
        html_string = ""

        if self.type_query == EDB:

            for result in self.last_scan_result["RESULTS_EXPLOIT"]:

                # check if there is a query result
                if result.get("URL", False):

                    # check if it is correct result
                    if (
                        result["URL"]
                        == f"https://www.exploit-db.com/exploits/{self.query.split(':')[1]}"
                    ):

                        html_string += "<p><b>Title: </b>"
                        html_string += f'{result["Title"]}</p><br>'

                        html_string += "<p><b>Url: </b>"
                        html_string += (
                            f'<a href= "{result["URL"]}" target="_blank">{result["URL"]}</a></p><br>'
                        )

        elif self.type_query == CVE:

            for result in self.last_scan_result["RESULTS_EXPLOIT"]:

                if result.get("URL", False):

                    html_string += "<p><b>Title: </b>"
                    html_string += f'{result["Title"]}</p><br>'

                    html_string += "<p><b>Url: </b>"
                    html_string += (
                        f'<a href= "{result["URL"]}">{result["URL"]}</a></p><br>'
                    )
        
        # get the cvss score detail
        cvss_vector = self.__get_cvss_vector__()

        if cvss_vector:

            # add cvss vector to the modal
            for key in cvss_vector.keys():
                html_string += f"<p><b>{key} vector: </b>"
                html_string += f"{cvss_vector[key]}"

        return html_string
    
    def __format_less_detailed_html__(self):
        html_string = ''

        for result in self.last_scan_result:
            for key in result.keys():

                html_string += f'<p><b>{key} Reference: </b>'
                html_string += f'<a href= "{result[key]}"> {result[key]}</a></p><br>'

        # get the cvss score detail
        cvss_vector = self.__get_cvss_vector__()

        if cvss_vector:

            # add cvss vector to the modal
            for key in cvss_vector.keys():
                html_string += f"<p><b>{key} vector: </b>"
                html_string += f"{cvss_vector[key]}"


        return html_string
    
    def __get_cvss_vector__(self):

        response = requests.get("https://vulners.com/api/v3/search/id/?id=" + self.query)

        # check if there is data
        if response.status_code == 200:
            response_dict:dict = json.loads(response.text)

            # check for data
            if response_dict.get("data"):
                
                # check for documents dict
                if response_dict["data"].get("documents"):

                    # check for id result
                    if response_dict["data"]["documents"].get(self.query):

                        # check for different type of cvss
                        if response_dict["data"]["documents"][self.query].get("cvss4"):

                            cvss_vector = {"cvss4": response_dict["data"]["documents"][self.query]["cvss4"]["cvssV4"]["vectorString"]}

                        elif response_dict["data"]["documents"][self.query].get("cvss3"):

                            cvss_vector = {"cvss3": response_dict["data"]["documents"][self.query]["cvss3"]["cvssV3"]["vectorString"]}

                        elif response_dict["data"]["documents"][self.query].get("cvss2"):

                            cvss_vector = {"cvss2": response_dict["data"]["documents"][self.query]["cvss2"]["cvssV2"]["vectorString"]}

                        else:

                            cvss_vector = {"cvss": response_dict["data"]["documents"][self.query]["cvss"]["vector"]}

                        return cvss_vector

        return None

